#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('pair:server');
const http = require('http');

/**
 * Get port from Env and set it in Express
*/

const port = normalizePort(5000);
app.set('port', port);

/**
 * Create HTTP Server
*/

const server = http.createServer(app);

/**
 * Socket.io
*/

/* const io = app.io;
io.attach(server);*/

/**
 * Listen to provided port on all network interfaces
*/

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string or false
*/


function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        return val;
    }

    if (port >= 0) {
        return port;
    }

    return false;
}

/**
 * HTTP "error" event listener
*/

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * HTTP "listening" event listener
*/

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    console.log('Listening on ' + bind);
}